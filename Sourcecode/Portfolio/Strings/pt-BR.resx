<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About me" xml:space="preserve">
    <value>Sobre</value>
  </data>
  <data name="ABOUT ME [#UpperCase]" xml:space="preserve">
    <value>SOBRE</value>
  </data>
  <data name="Age" xml:space="preserve">
    <value>Idade</value>
  </data>
  <data name="and a lot of coffee" xml:space="preserve">
    <value>e muito café</value>
  </data>
  <data name="Created and idealized by" xml:space="preserve">
    <value>Criado e idealizado por</value>
  </data>
  <data name="Education" xml:space="preserve">
    <value>Acadêmico</value>
  </data>
  <data name="EDUCATION [#UpperCase]" xml:space="preserve">
    <value>ACADÊMICO</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Fullstack Developer" xml:space="preserve">
    <value>Fullstack Developer</value>
  </data>
  <data name="I'm Alisson Rubim" xml:space="preserve">
    <value>Eu sou o Alisson Rubim</value>
  </data>
  <data name="Made with" xml:space="preserve">
    <value>Feito com</value>
  </data>
  <data name="My informations" xml:space="preserve">
    <value>Meus dados</value>
  </data>
  <data name="Navigate" xml:space="preserve">
    <value>Navigate</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telefone</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projetos</value>
  </data>
  <data name="PROJECTS [#UpperCase]" xml:space="preserve">
    <value>PROJETOS</value>
  </data>
  <data name="Skills" xml:space="preserve">
    <value>Habilidades</value>
  </data>
  <data name="SKILLS [#UpperCase]" xml:space="preserve">
    <value>HABILIDADES</value>
  </data>
  <data name="Website" xml:space="preserve">
    <value>Website</value>
  </data>
  <data name="Welcome," xml:space="preserve">
    <value>Seja bem-vindo(a),</value>
  </data>
  <data name="Advanced" xml:space="preserve">
    <value>Avançado</value>
  </data>
  <data name="Basic" xml:space="preserve">
    <value>Básico</value>
  </data>
  <data name="Clique here to know more about my projects" xml:space="preserve">
    <value>Clique aqui para conhecer mais alguns de meus projetos</value>
  </data>
  <data name="Database" xml:space="preserve">
    <value>Banco de dados</value>
  </data>
  <data name="Design" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>Inglês</value>
  </data>
  <data name="Intermediate" xml:space="preserve">
    <value>Intermediário</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Línguas</value>
  </data>
  <data name="Native" xml:space="preserve">
    <value>Nativo</value>
  </data>
  <data name="Portuguese" xml:space="preserve">
    <value>Português</value>
  </data>
  <data name="Spanish" xml:space="preserve">
    <value>Espanhol</value>
  </data>
  <data name="Mobile Development" xml:space="preserve">
    <value>Desenvolvimento Mobile</value>
  </data>
  <data name="ALISSON RUBIM [#UpperCase]" xml:space="preserve">
    <value>ALISSON RUBIM</value>
  </data>
  <data name="Back-End Development" xml:space="preserve">
    <value>Desenvolvimento Back-End</value>
  </data>
  <data name="Front-End Development" xml:space="preserve">
    <value>Desenvolvimento Front-End</value>
  </data>
  <data name="Fullstack Developer and Designer by hobby" xml:space="preserve">
    <value>Fullstack Developer e Designer por hobby</value>
  </data>
  <data name="GuideMe is a 2D game made to stimulate children to learn more about development." xml:space="preserve">
    <value>GuideMe é um joguinho 2D feito para estimular crianças a aprender mais sobre desenvolvimento.</value>
  </data>
  <data name="The game is interesting because it is possible to program the actions of the doll with simple commands, showing to those who are learning how the programming logic works." xml:space="preserve">
    <value>O jogo é interessante pois com ele é possível programar as ações do boneco, com simples comandos, mostrando para quem esta apredendo como funciona a lógica da programação.</value>
  </data>
  <data name="Computer science" xml:space="preserve">
    <value>Ciência da Computação</value>
  </data>
  <data name="Brazilian born in Minas Gerais, I am a young man in love with technology and soon discovered that his hobby as a programmer could become a profession. From the age of 14 I tried to learn and improve my knowledge, starting with the basics of C and discovering over time my vocation for web development." xml:space="preserve">
    <value>Brasileiro nascido em Minas Gerais, sou um rapaz apaixonado por tecnologia e que logo cedo descobriu que seu hobby de programador poderia se tornar uma profissão. Desde os 14 anos busquei aprender e aprimorar meus conhecimentos, começando com o básico do C e descobrindo com o tempo a minha vocação para o desenvolvimento web.</value>
  </data>
  <data name="Analysis and systems development" xml:space="preserve">
    <value>Análise e Desenvolvimento de Sistemas</value>
  </data>
</root>